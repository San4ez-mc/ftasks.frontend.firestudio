
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { handleTelegramLogin, generateGroupLinkCode, findUserByTelegramId } from '@/lib/telegram-auth';
import { parseTelegramCommand } from '@/ai/flows/telegram-command-flow';
import { 
    createTaskInDb, 
    createResultInDb, 
    updateTaskInDb, 
    updateResultInDb,
    getAllTasksForCompany,
    getAllResultsForCompany,
    getAllEmployeesForCompany,
    getEmployeeLinkForUser,
    findTelegramGroupByTgId,
    upsertTelegramMember,
    getMembersForGroupDb,
    getAllTemplatesForCompany,
    createTemplateInDb,
} from '@/lib/firestore-service';
import { sendTelegramMessage } from '@/lib/telegram-service';
import type { Task } from '@/types/task';
import type { Result, SubResult } from '@/types/result';
import { ai } from '@/ai/genkit';
import type { Template } from '@/types/template';


interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

interface TelegramChat {
    id: number;
    title: string;
    type: 'private' | 'group' | 'supergroup';
}

interface TelegramVoice {
    file_id: string;
    duration: number;
    // ... other voice fields
}

const APP_URL = process.env.NEXT_PUBLIC_APP_URL || "https://studio--fineko-tasktracker.us-central1.hosted.app";
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME || "FinekoTasks_Bot";


// --- Parameter Parsing Functions ---
const parseTitle = (text: string): string => {
    const match = text.match(/['"](.+?)['"]/);
    return match ? match[1] : text;
};

const parseAssignee = (text: string, employees: {id: string, name: string}[], currentUser: {id: string, name: string}) => {
    const lowerText = text.toLowerCase();
    for (const employee of employees) {
        if (lowerText.includes(employee.name.toLowerCase())) {
            return employee;
        }
    }
    return currentUser; // Default to current user
};

const parseDate = (text: string): string => {
    const lowerText = text.toLowerCase();
    if (lowerText.includes('–∑–∞–≤—Ç—Ä–∞')) {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        return tomorrow.toISOString().split('T')[0];
    }
    if (lowerText.includes('—Å—å–æ–≥–æ–¥–Ω—ñ')) {
        return new Date().toISOString().split('T')[0];
    }
    const dateMatch = text.match(/\d{4}-\d{2}-\d{2}/);
    if (dateMatch) {
        return dateMatch[0];
    }
    return new Date().toISOString().split('T')[0]; // Default to today
};

const parseSubResults = (text: string): string[] => {
    const match = text.match(/–ø—ñ–¥—Ä–µ–∑—É–ª—å—Ç–∞—Ç(?:–∏)?:?\s*(.+)/i);
    if (!match || !match[1]) return [];
    
    // Split by commas or quotation marks
    return match[1].split(/[,"]+/).map(s => s.trim()).filter(Boolean);
};


async function handleNaturalLanguageCommand(chat: TelegramChat, user: TelegramUser, text: string) {
    const finekoUser = await findUserByTelegramId(user.id.toString());
    if (!finekoUser) {
        await sendTelegramMessage(chat.id, { text: "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –≤ —Å–∏—Å—Ç–µ–º—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫." });
        return;
    }

    const employeeLink = await getEmployeeLinkForUser(finekoUser.id);
    if (!employeeLink) {
        await sendTelegramMessage(chat.id, { text: "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –∂–æ–¥–Ω–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó." });
        return;
    }
    const { companyId } = employeeLink;

    try {
        const allEmployees = await getAllEmployeesForCompany(companyId);
        const allTemplates = await getAllTemplatesForCompany(companyId);
        const currentEmployee = allEmployees.find(e => e.userId === finekoUser.id);
        
        if (!currentEmployee) {
            await sendTelegramMessage(chat.id, { text: "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó." });
            return;
        }

        const allowedCommands = currentEmployee?.telegramPermissions || [];
        const employeeListForAI = allEmployees.map(e => ({ id: e.id, name: `${e.firstName} ${e.lastName}` }));
        const templateListForAI = allTemplates.map(t => ({ id: t.id, name: t.name }));
        const currentUserForAI = { id: currentEmployee.id, name: `${currentEmployee.firstName} ${currentEmployee.lastName}` };
        
        const aiResults = await parseTelegramCommand({
            command: text,
            employees: employeeListForAI,
            templates: templateListForAI,
            allowedCommands: allowedCommands,
            currentUser: currentUserForAI,
        });

        // The webhook now executes a sequence of commands
        for (const aiResult of aiResults) {
            const commandText = aiResult.text || '';

            switch (aiResult.command) {
                case 'create_task': {
                    const title = parseTitle(commandText);
                    if (!title) {
                        await sendTelegramMessage(chat.id, { text: "ü§î –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∑—è—Ç–∏ —ó—ó –≤ –ª–∞–ø–∫–∏." });
                        continue;
                    }

                    const assigneeInfo = parseAssignee(commandText, employeeListForAI, currentUserForAI);
                    const assignee = allEmployees.find(e => e.id === assigneeInfo.id);
                    if (!assignee) {
                        await sendTelegramMessage(chat.id, { text: `–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ ${assigneeInfo.name}.` });
                        continue;
                    }
                    const dueDate = parseDate(commandText);

                    const newTaskData: Omit<Task, 'id' | 'companyId'> = {
                        title: title,
                        dueDate: dueDate,
                        status: 'todo',
                        type: 'important-not-urgent',
                        expectedTime: 30,
                        assignee: { id: assignee.id, name: `${assignee.firstName} ${assignee.lastName}`, avatar: assignee.avatar },
                        reporter: { id: currentEmployee.id, name: `${currentEmployee.firstName} ${currentEmployee.lastName}`, avatar: currentEmployee.avatar },
                    };
                    const createdTask = await createTaskInDb(companyId, newTaskData);
                    await sendTelegramMessage(chat.id, { text: `‚úÖ –ó–∞–¥–∞—á—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: "${createdTask.title}" –¥–ª—è ${assignee.firstName} ${assignee.lastName}.` });
                    break;
                }
                
                case 'create_result': {
                    const title = parseTitle(commandText);
                    if (!title) {
                         await sendTelegramMessage(chat.id, { text: "ü§î –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∑—è—Ç–∏ —ó—ó –≤ –ª–∞–ø–∫–∏." });
                        continue;
                    }

                    const assigneeInfo = parseAssignee(commandText, employeeListForAI, currentUserForAI);
                    const assignee = allEmployees.find(e => e.id === assigneeInfo.id);
                     if (!assignee) {
                        await sendTelegramMessage(chat.id, { text: `–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ ${assigneeInfo.name}.` });
                        continue;
                    }
                    const deadline = parseDate(commandText);

                    const twoWeeksFromNow = new Date();
                    twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);

                    const newResultData: Omit<Result, 'id' | 'companyId'> = {
                        name: title,
                        status: '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ',
                        completed: false,
                        deadline: deadline || twoWeeksFromNow.toISOString().split('T')[0],
                        assignee: { id: assignee.id, name: `${assignee.firstName} ${assignee.lastName}`, avatar: assignee.avatar },
                        reporter: { id: currentEmployee.id, name: `${currentEmployee.firstName} ${currentEmployee.lastName}`, avatar: currentEmployee.avatar },
                        subResults: [], tasks: [], templates: [], comments: [], accessList: [],
                    };
                    const createdResult = await createResultInDb(companyId, newResultData);
                    await sendTelegramMessage(chat.id, { text: `üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç "${createdResult.name}" —Å—Ç–≤–æ—Ä–µ–Ω–æ.` });
                    
                    // Now, handle sub-results if they exist in the same command
                    const subResultNames = parseSubResults(commandText);
                    if (subResultNames.length > 0) {
                         const newSubResults: SubResult[] = subResultNames.map(name => ({
                            id: `sub-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
                            name,
                            completed: false,
                        }));
                        await updateResultInDb(companyId, createdResult.id, { subResults: newSubResults });
                        await sendTelegramMessage(chat.id, { text: `üìù –î–æ–¥–∞–Ω–æ –ø—ñ–¥—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n- ${subResultNames.join('\n- ')}` });
                    }
                    break;
                }

                case 'view_my_tasks': {
                    const allTasks = await getAllTasksForCompany(companyId);
                    const date = parseDate(commandText);
                    const isTodo = commandText.includes('–Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ');
                    
                    let filteredTasks = allTasks.filter(t => t.dueDate === date && t.assignee?.id === currentEmployee.id);
                    if(isTodo) {
                        filteredTasks = filteredTasks.filter(t => t.status === 'todo');
                    }
                    
                    if (filteredTasks.length === 0) {
                        await sendTelegramMessage(chat.id, { text: `‚úÖ –í–∞—à–∏—Ö –∑–∞–¥–∞—á –Ω–∞ ${date} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.` });
                    } else {
                        const taskList = filteredTasks.map(t => `- ${t.status === 'done' ? '‚úÖ' : 'üìù'} ${t.title}`).join('\n');
                        await sendTelegramMessage(chat.id, { text: `–û—Å—å –≤–∞—à—ñ –∑–∞–¥–∞—á—ñ –Ω–∞ ${date}:\n${taskList}` });
                    }
                    break;
                }
                
                case 'list_employees': {
                    const employeeNames = allEmployees.map(e => `- ${e.firstName} ${e.lastName}`).join('\n');
                    await sendTelegramMessage(chat.id, { text: `–û—Å—å —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤:\n${employeeNames}` });
                    break;
                }
                
                case 'list_templates': {
                     const templates = await getAllTemplatesForCompany(companyId);
                    if (templates.length === 0) {
                        await sendTelegramMessage(chat.id, { text: "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É." });
                    } else {
                        const templateList = templates.map(t => `- ${t.name} (${t.repeatability})`).join('\n');
                        await sendTelegramMessage(chat.id, { text: `–û—Å—å –≤–∞—à—ñ —à–∞–±–ª–æ–Ω–∏:\n${templateList}` });
                    }
                    break;
                }
                
                case 'view_results': {
                    const results = await getAllResultsForCompany(companyId);
                     if (results.length === 0) {
                        await sendTelegramMessage(chat.id, { text: `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.` });
                    } else {
                        const resultList = results.map(r => `- ${r.completed ? '‚úÖ' : 'üéØ'} ${r.name}`).join('\n');
                        await sendTelegramMessage(chat.id, { text: `–û—Å—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:\n${resultList}` });
                    }
                    break;
                }
                
                // Add other command handlers here...

                case 'show_help':
                    await sendTelegramMessage(chat.id, { text: commandText });
                    break;
                
                case 'clarify':
                     await sendTelegramMessage(chat.id, { text: "ü§î –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏." });
                     break;

                case 'unknown':
                default:
                    await sendTelegramMessage(chat.id, { text: "–Ø –Ω–µ –∑–º—ñ–≥ –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç–∏, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '—Å—Ç–≤–æ—Ä–∏ –∑–∞–¥–∞—á—É', '—Å—Ç–≤–æ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç', –∞–±–æ '—Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤'." });
                    break;
            }
        }
    } catch (error) {
        console.error("Error processing natural language command:", error);
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        await sendTelegramMessage(chat.id, { text: `üî¥ –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: ${errorMessage}` });
    }
}

async function getTelegramAudioDataUri(fileId: string): Promise<string> {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) throw new Error("TELEGRAM_BOT_TOKEN is not defined.");

    const getFileUrl = `https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`;
    const fileInfoResponse = await fetch(getFileUrl);
    if (!fileInfoResponse.ok) throw new Error("Failed to get file info from Telegram.");
    const fileInfo = await fileInfoResponse.json();
    const filePath = fileInfo.result.file_path;
    if (!filePath) throw new Error("File path not found in Telegram response.");

    const downloadUrl = `https://api.telegram.org/file/bot${botToken}/${filePath}`;
    const audioResponse = await fetch(downloadUrl);
    if (!audioResponse.ok) throw new Error("Failed to download audio file from Telegram.");
    
    const audioBuffer = await audioResponse.arrayBuffer();
    const base64String = Buffer.from(audioBuffer).toString('base64');
    
    // Assuming the audio is ogg format, which is common for Telegram voice messages.
    return `data:audio/ogg;base64,${base64String}`;
}

async function handleFirstGroupMessage(chatId: number, chatTitle: string, user: TelegramUser) {
    const group = await findTelegramGroupByTgId(chatId.toString());
    if (!group) return; // Not a group linked to our system

    const members = await getMembersForGroupDb(group.companyId, group.id);
    const isExistingMember = members.some(m => m.tgUserId === user.id.toString());

    if (!isExistingMember) {
        await upsertTelegramMember(group.companyId, {
            groupId: group.id,
            tgUserId: user.id.toString(),
            tgFirstName: user.first_name,
            tgLastName: user.last_name || '',
            tgUsername: user.username || '',
        });
        const username = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name || ''}`;
        await sendTelegramMessage(chatId, { text: `‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–º–ø–∞–Ω—ñ—ó "${group.title}".` });
    }
}

/**
 * This is the Next.js backend endpoint that Telegram will call.
 */
export async function POST(request: NextRequest) {
  console.log("Webhook request received");
  
  try {
    const body = await request.json();
    console.log("Webhook body:", JSON.stringify(body, null, 2));

    if (body.message) {
        const message = body.message;
        const chat: TelegramChat = message.chat;
        const fromUser: TelegramUser = message.from;
        const text = (message.text || '') as string;
        const voice = message.voice as TelegramVoice | undefined;
        const isReplyToBot = message.reply_to_message?.from?.username === BOT_USERNAME;
        const isBotMentioned = text.includes(`@${BOT_USERNAME}`);

        // --- Voice Message Handler ---
        if (voice) {
             try {
                const audioDataUri = await getTelegramAudioDataUri(voice.file_id);

                const transcribeResponse = await ai.generate({
                    model: 'googleai/gemini-1.5-flash-latest',
                    prompt: [{media: {url: audioDataUri, contentType: 'audio/ogg'}}, {text: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–π —Ü–µ –∞—É–¥—ñ–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ü—Ä–∏–±–µ—Ä–∏ –±—É–¥—å-—è–∫—ñ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç–∏ —Ç–∞ –∑–∞–ø–æ–≤–Ω—é–≤–∞—á—ñ –ø–∞—É–∑, —â–æ–± —Ç–µ–∫—Å—Ç –±—É–≤ —á–∏—Å—Ç–∏–º —Ç–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º.'}],
                });
                const transcribedText = transcribeResponse.text;

                if (!transcribedText) {
                    await sendTelegramMessage(chat.id, { text: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑." });
                    return NextResponse.json({ status: 'ok', message: 'Audio transcription failed.' });
                }

                await handleNaturalLanguageCommand(chat, fromUser, transcribedText);
                return NextResponse.json({ status: 'ok', message: 'Voice command processed.' });

            } catch (error) {
                console.error("Error processing voice message:", error);
                const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
                await sendTelegramMessage(chat.id, { text: `üî¥ –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: ${errorMessage}` });
                return NextResponse.json({ status: 'error', message: 'Failed to process voice command.' });
            }
        }


        // --- /start command handler ---
        if (text.startsWith('/start')) {
            // Group Linking Flow
            if (chat.type === 'group' || chat.type === 'supergroup') {
                const { code, error } = await generateGroupLinkCode(chat.id.toString(), chat.title);
                if (error || !code) {
                     await sendTelegramMessage(chat.id, { text: `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏: ${error}` });
                     return NextResponse.json({ status: 'error', message: error }, { status: 500 });
                }
                
                const linkUrl = `${APP_URL}/telegram-groups?action=add-group`;
                
                await sendTelegramMessage(chat.id, {
                    text: `–î–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ —Ü—ñ—î—ó –≥—Ä—É–ø–∏ –¥–æ FINEKO, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –≤–≤–µ—Å—Ç–∏ —Ü–µ–π –∫–æ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '–¢–µ–ª–µ–≥—Ä–∞–º –≥—Ä—É–ø–∏':\n\n*${code}*\n\n–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π 10 —Ö–≤–∏–ª–∏–Ω.`,
                    reply_markup: {
                        inline_keyboard: [[{ text: "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ FINEKO", url: linkUrl }]]
                    }
                });
                return NextResponse.json({ status: 'ok', message: 'Group link code sent.' });
            }
            
            // Private Chat Login Flow
            if (chat.type === 'private') {
                const payload = text.split(' ')[1] || 'auth';
                const rememberMe = payload === 'auth_remember';

                const { tempToken, error, details } = await handleTelegramLogin(fromUser, rememberMe);
                console.log(`User lookup/creation result: ${details}`);

                if (error || !tempToken) {
                    const errorMessage = error || 'Authentication failed. No token provided.';
                    await sendTelegramMessage(chat.id, { text: `–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: ${errorMessage}` });
                    return NextResponse.json({ status: 'error', message: errorMessage }, { status: 500 });
                }
                
                const redirectUrl = `${APP_URL}/auth/telegram/callback?token=${tempToken}`;

                await sendTelegramMessage(chat.id, {
                    text: "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Ö—ñ–¥.",
                    reply_markup: {
                        inline_keyboard: [[{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Ö—ñ–¥ —É FINEKO", url: redirectUrl }]],
                    }
                });
                return NextResponse.json({ status: 'ok', message: 'Login link sent.' });
            }
        } 
        // --- Natural Language Command Handler (Text only) ---
        else if (text && (chat.type === 'private' || ( (chat.type === 'group' || chat.type === 'supergroup') && (isBotMentioned || isReplyToBot) ))) {
            const commandText = text.replace(`@${BOT_USERNAME}`, '').trim();
            await handleNaturalLanguageCommand(chat, fromUser, commandText);
            return NextResponse.json({ status: 'ok', message: 'Command processed.' });
        }
        // --- New Member Discovery Handler ---
        else if (text && (chat.type === 'group' || chat.type === 'supergroup')) {
            await handleFirstGroupMessage(chat.id, chat.title, fromUser);
            // This can fall through, so the message is not just "swallowed" if other logic needs to process it.
            // For now, we'll stop here.
            return NextResponse.json({ status: 'ok', message: 'Member discovery checked.' });
        }
    }


    return NextResponse.json({ status: 'ok', message: 'Webhook received, but no action taken.' });

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    console.error('Critical error in webhook handler:', errorMessage, error);
    // Try to send a message back to the user if we have a chat ID, but this might fail.
    try {
        const body = await request.json().catch(() => ({}));
        const chatId = body?.message?.chat?.id;
        if (chatId) {
            await sendTelegramMessage(chatId, { text: `–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.` });
        }
    } catch (sendError) {
        console.error("Failed to send critical error message to user:", sendError);
    }
    return NextResponse.json({ status: 'error', message: 'Internal Server Error' }, { status: 500 });
  }
}
